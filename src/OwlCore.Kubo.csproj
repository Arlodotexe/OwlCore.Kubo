<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net6.0;</TargetFrameworks>
    <Nullable>enable</Nullable>
    <LangVersion>10.0</LangVersion>
    <WarningsAsErrors>nullable</WarningsAsErrors>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>

    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <IncludeSymbols>true</IncludeSymbols>

    <!-- Include symbol files (*.pdb) in the built .nupkg -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>

    <Author>Arlo Godfrey</Author>
    <Version>0.5.0</Version>
    <Product>OwlCore</Product>
    <Description>
      An essential toolkit for Kubo, IPFS and the distributed web. 
    </Description>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <PackageReleaseNotes>
--- 0.5.1 ---
[Fixed]
Fixed an issue where Disposing an MfsStream would not flush the data, resulting in errors when a separate MfsStream to the same resource was opened.

--- 0.5.0 ---
[Improvements]
Updated to OwlCore 0.1.0. Removes a number of uneeded transient dependencies.

[Breaking]
All breaking changes from OwlCore 0.1.0 have been inherited. See release notes for OwlCore 0.1.0.

--- 0.4.0 ---
[New]
Added MfsFile and MfsFolder. MFS acts like a regular name-based filesystem. You can add, remove, move, and edit MFS files, but the actual content is on IPFS, and can be distributed like any other content on IPFS. MfsFolder is modifiable, so it can be hotswapped for SystemFolder, WindowsStorageFolder, etc. for the vast majority of use cases
Added MfsStream. This is a standard System.IO.Stream implementation that reads directly from a file in MFS.

[Fixed]
Fixed invalid NotifyCollectionChanged arguments that prevented TimerBasedIpnsWatcher from working.

[Breaking]
All folder watchers now reside in the namespace OwlCore.Kubo.FolderWatchers.
Renamed IpnsFolderTimerWatcher to TimerBasedIpnsWatcher.
Renamed IAddressableIpfsStorable to IChainedAddressableStorable.

--- 0.3.0 ---
[Breaking]
Inheriting breaking changes from OwlCore.Storage. See release notes for 0.5.0.

--- 0.2.1 ---
[New]
IpnsFolder now implements IMutableFolder. The folder watcher used is timer based, and periodically diffs the content.

--- 0.2.0 ---
[Breaking]
Inheriting breaking changes from OwlCore.Storage. See release notes for 0.4.0.

[New]
Added AddressableIpfsFile and AddressableIpfsFolder. Any item returned from a folder will now implement IAddressableStorage, allowing you to traverse back to the root folder.
Added IpnsFile and IpnsFolder, with properly transforming IDs during traversal. For example, you can start with a new IpnsFolder("/ipns/ipfs.tech"), and calling GetItemsAsync recursively could yield you with a file or folderwith an ID and path of "/ipns/ipfs.tech/some/really/deep/path/".

--- 0.1.4 ---
Fixed IpfsFolder.GetItemsAsync returning all items, regardless of the StorableType used.

--- 0.1.3 ---
Updated OwlCore.Storage dependency to the latest version.

--- 0.1.2 ---
[Improvements]
Updated packages. Removes various transitive dependencies.

--- 0.1.1 ---
[Fixed]
Fixed KuboBootstrapper failing to execute on Linux due to unset execute permission.

--- 0.1.0 ---
[New]
Added basic OwlCore.Storage implementations of IpfsFolder and IpfsFile.
Renamed KuboDownloader.DownloadBinaryAsync to KuboDownload.DownloadLatestBinaryAsync.
Added KuboDownloader.DownloadBinaryAsync, which takes a specific Version to install.

[Improvements]
Unit tests will now automatically use a local node when it's available, falling back to an embedded node if needed.

--- 0.0.0 ---
Initial release.

[New]
Added KuboBoostrapper.
Added KuboDownloader.
Added unit tests.
    </PackageReleaseNotes>
    <DebugType>embedded</DebugType>
    <NeutralLanguage>en</NeutralLanguage>
    <Authors>Arlo Godfrey</Authors>
    <ImplicitUsings>enable</ImplicitUsings>
    <PackageIcon>logo.png</PackageIcon>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <Optimize>true</Optimize>
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    <Deterministic>true</Deterministic>
  </PropertyGroup>

  <ItemGroup>
    <None Include="LICENSE.txt">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>

    <None Include="logo.png" Pack="true" PackagePath="" />    
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="CommunityToolkit.Diagnostics" Version="8.0.0" />
    <PackageReference Include="IpfsShipyard.Ipfs.Http.Client" Version="0.0.3" />
    <PackageReference Include="OwlCore" Version="0.1.0" />
    <PackageReference Include="OwlCore.Storage" Version="0.5.0" />
    <PackageReference Include="Microsoft.Bcl.AsyncInterfaces" Version="6.0.0" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All" />
    <PackageReference Include="SharpCompress" Version="0.32.2" />
    <PackageReference Include="System.Linq.Async" Version="6.0.1" />
    <PackageReference Include="System.Text.Json" Version="6.0.5" />  <None Include="logo.png" Pack="true" PackagePath="" />    
  </ItemGroup>
</Project>